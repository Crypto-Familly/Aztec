#!/bin/bash

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞
if [[ ! -x "$0" ]]; then
  echo "–ù–∞–¥–∞—é –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É..."
  chmod +x "$0"
fi

# ==== –ö–æ–ª—å–æ—Ä–∏ ====
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ==== –õ–æ–≥–æ—Ç–∏–ø —ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ ====
show_logo() {
  curl -s https://raw.githubusercontent.com/Crypto-Familly/crypto-familly-logo/refs/heads/main/logo.sh | bash 2>/dev/null

  echo -e "${CYAN}================= Crypto Familly =================${NC}"
  echo -e "üí¨ Telegram Hub: ${BLUE}https://t.me/CryptoFamilyHub${NC}"
  echo -e "üíª GitHub:        ${BLUE}https://github.com/Crypto-Familly${NC}"
  echo -e "${CYAN}==================================================${NC}"
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –û–° ====
check_os() {
  version=$(lsb_release -rs)
  if [[ $(echo "$version < 22.04" | bc) -eq 1 ]]; then
    echo -e "${RED}[‚úò] –ü–æ—Ç—Ä—ñ–±–Ω–∞ Ubuntu 22.04 –∞–±–æ –Ω–æ–≤—ñ—à–∞. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $version${NC}"
    exit 101
  fi
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤ ====
check_ports() {
  ports=(8080 40400)
  for port in "${ports[@]}"; do
    if lsof -i :$port &>/dev/null; then
      echo -e "${RED}[!] –ü–æ—Ä—Ç $port –∑–∞–π–Ω—è—Ç–∏–π!${NC}"
      echo "–ü—Ä–æ—Ü–µ—Å:"
      sudo lsof -i :$port
      read -p "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –Ω–∞ –ø–æ—Ä—Ç—É $port? (y/n): " choice
      if [[ $choice == "y" ]]; then
        pid=$(sudo lsof -ti :$port)
        sudo kill -9 $pid
        echo -e "${GREEN}[‚úì] –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ.${NC}"
      else
        echo -e "${RED}[‚úò] –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–æ—Ä—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –Ω–æ–¥–∏. –í–∏—Ö—ñ–¥.${NC}"
        exit 102
      fi
    fi
  done
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ ====
check_resources() {
  MIN_CPU=8
  MIN_RAM=16384  # 16GB –≤ MB
  MIN_DISK_GB=100 # 100GB

  # CPU
  cpu_cores=$(nproc)
  if (( cpu_cores < MIN_CPU )); then
    echo -e "${RED}[‚úò] –ú—ñ–Ω—ñ–º—É–º —è–¥–µ—Ä CPU: $MIN_CPU, –∑–Ω–∞–π–¥–µ–Ω–æ: $cpu_cores${NC}"
    exit 103
  fi

  # RAM
  ram_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  ram_mb=$(( ram_kb / 1024 ))
  if (( ram_mb < MIN_RAM )); then
    echo -e "${RED}[‚úò] –ú—ñ–Ω—ñ–º—É–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–º'—è—Ç—ñ: $((MIN_RAM / 1024)) GB, –∑–Ω–∞–π–¥–µ–Ω–æ: $((ram_mb / 1024)) GB${NC}"
    exit 104
  fi

  # –î–∏—Å–∫
  disk_kb=$(df --output=avail "$HOME" | tail -1)
  disk_gb=$(( disk_kb / 1024 / 1024 ))
  if (( disk_gb < MIN_DISK_GB )); then
    echo -e "${RED}[‚úò] –ú—ñ–Ω—ñ–º—É–º –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É: ${MIN_DISK_GB}GB, –∑–Ω–∞–π–¥–µ–Ω–æ: ${disk_gb}GB${NC}"
    exit 105
  fi

  echo -e "${GREEN}[‚úì] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.${NC}"
}

# ==== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ====
install_dependencies() {
  sudo apt-get update && sudo apt-get upgrade -y
  sudo apt install curl iptables build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip libleveldb-dev iptables-persistent -y
}

# ==== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker ====
install_docker() {
  if ! command -v docker &> /dev/null; then
    echo -e "${YELLOW}Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ...${NC}"
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    sudo groupadd docker 2>/dev/null
    sudo usermod -aG docker $USER
    sudo chmod 666 /var/run/docker.sock
    sudo systemctl start docker
    rm get-docker.sh
    echo -e "${GREEN}[‚úì] Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.${NC}"
  else
    echo -e "${GREEN}[‚úì] Docker –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π.${NC}"
  fi
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Docker –æ–±—Ä–∞–∑—É —Ç–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ====
auto_update_node() {
  echo -e "${CYAN}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å Aztec-–Ω–æ–¥–∏...${NC}"
  local_image_version=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep aztecprotocol/aztec | head -n1)
  latest_version="aztecprotocol/aztec:0.85.0-alpha-testnet.8"

  if [[ "$local_image_version" != "$latest_version" ]]; then
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–∞–∑...${NC}"
    docker pull "$latest_version"
    echo -e "${GREEN}[‚úì] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.${NC}"
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥–∏, —è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–∞
    if systemctl is-active --quiet aztec-sequencer; then
      echo -e "${CYAN}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ Aztec-–Ω–æ–¥—É...${NC}"
      sudo systemctl restart aztec-sequencer
      echo -e "${GREEN}[‚úì] –ù–æ–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.${NC}"
    fi
  else
    echo -e "${GREEN}–í–∞—à–∞ Aztec-–Ω–æ–¥–∞ –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó.${NC}"
  fi
}

# ==== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è systemd-—Å–µ—Ä–≤—ñ—Å—É Aztec ====
setup_node() {
  echo -e "${GREEN}[+] –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Aztec-–Ω–æ–¥–∏...${NC}"
  mkdir -p "$HOME/aztec-sequencer"
  cd "$HOME/aztec-sequencer" || exit 1

  docker pull aztecprotocol/aztec:0.85.0-alpha-testnet.8

  echo -n "üîë –í–≤–µ–¥—ñ—Ç—å ETHEREUM_HOSTS (RPC Sepolia): "
  read RPC
  echo -n "üîë –í–≤–µ–¥—ñ—Ç—å L1_CONSENSUS_HOST_URLS (Beacon Sepolia): "
  read BEACON
  echo -n "üîê –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –≤–∞—à–æ–≥–æ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞: "
  read -s PRIVKEY
  echo
  IP=$(hostname -I | awk '{print $1}')
  echo -e "üåê –í–∏–∑–Ω–∞—á–µ–Ω–æ IP-–∞–¥—Ä–µ—Å—É —Å–µ—Ä–≤–µ—Ä–∞: ${GREEN}$IP${NC}"

  mkdir -p "$HOME/my-node/node"

  SERVICE_PATH="/etc/systemd/system/aztec-sequencer.service"

  sudo tee $SERVICE_PATH > /dev/null <<EOF
[Unit]
Description=Aztec Sequencer Node
After=docker.service
Requires=docker.service

[Service]
User=$USER
Restart=always
RestartSec=10
ExecStart=/usr/bin/docker run --rm \\
  --network host \\
  -e ETHEREUM_HOSTS="$RPC" \\
  -e L1_CONSENSUS_HOST_URLS="$BEACON" \\
  -e DATA_DIRECTORY=/data \\
  -e VALIDATOR_PRIVATE_KEY="$PRIVKEY" \\
  -e P2P_IP="$IP" \\
  -e LOG_LEVEL=debug \\
  -v $HOME/my-node/node:/data \\
  --name aztec-sequencer \\
  aztecprotocol/aztec:0.85.0-alpha-testnet.8 \\
  sh -c 'node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start --network alpha-testnet --node --archiver --sequencer'

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reexec
  sudo systemctl daemon-reload
  sudo systemctl enable aztec-sequencer
  sudo systemctl start aztec-sequencer

  echo -e "${GREEN}[‚úì] Aztec-–Ω–æ–¥–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫.${NC}"
  echo "–©–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ª–æ–≥–∏: ${GREEN}journalctl -fu aztec-sequencer${NC}"
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –Ω–æ–¥–∏ ====
check_node_status() {
  if systemctl is-active --quiet aztec-sequencer; then
    echo -e "${GREEN}–ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Ç–∞ –ø—Ä–∞—Ü—é—î.${NC}"
    echo "–û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—ñ–≤:"
    journalctl -u aztec-sequencer -n 10 --no-pager
  else
    echo -e "${RED}–ù–æ–¥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.${NC}"
  fi
}

# ==== –ú–µ–Ω—é ====
show_menu() {
  clear
  show_logo
  echo -e "\n${GREEN}1.${NC} –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, Docker, —Ä–µ—Å—É—Ä—Å–∏"
  echo -e "${GREEN}2.${NC} –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ä—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Aztec-–Ω–æ–¥—É"
  echo -e "${GREEN}3.${NC} –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–æ–¥–∏ —Ç–∞ –ª–æ–≥–∏"
  echo -e "${GREEN}4.${NC} –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏"
  echo -e "${GREEN}0.${NC} –í–∏–π—Ç–∏"
  echo -ne "\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: "
  read choice

  case $choice in
    1)
      check_os
      check_resources
      install_dependencies
      install_docker
      ;;
    2)
      check_ports
      setup_node
      ;;
    3)
      check_node_status
      ;;
    4)
      auto_update_node
      ;;
    0)
      echo "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!"
      exit 0
      ;;
    *)
      echo -e "${RED}–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.${NC}"
      ;;
  esac
}

# ==== MAIN ====
main() {
  while true; do
    show_menu
    echo -e "\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é..."
    read
  done
}

main
